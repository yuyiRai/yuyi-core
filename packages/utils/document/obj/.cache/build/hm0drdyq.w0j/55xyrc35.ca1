<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title> </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content=" ">
    <meta name="generator" content="docfx 2.43.3.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="LodashExtra!">
  
  
  <h1 id="LodashExtra_" data-uid="LodashExtra!"></h1>
  <div class="markdown level0 summary"><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">封装自lodash的实用工具集合</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <h3 id="functions">
  </h3>
  
  
  <h4 id="LodashExtra_castArray_function_1_" data-uid="LodashExtra!castArray:function(1)">castArray(value, allowEmpty)</h4>
  <div class="markdown level1 summary"><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">将一个非数组值转换为数组</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function castArray&lt;T = any&gt;(value: T | T[], allowEmpty?: boolean | 'strict'): T[];</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">T | T[]</span></td>
        <td><em>value</em></td>
        <td>
          <p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">输入值</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">boolean | &#39;strict&#39;</span></td>
        <td><em>allowEmpty</em></td>
        <td>
          <p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">是否允许数组成员为nil（默认为true），false时会过滤掉null或undefined</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">T[]</span></td>
        <td><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">由输入值转化而来的数组</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">&#31867;&#22411;&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><em>T</em></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 id="LodashExtra_castArray_function_1__remarks">&#22791;&#27880;</h5>
  <div class="markdown level1 remarks"><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">注意，如果不允许空值（allowEmpty为false），即便输入值本身为数组也会进行过滤</p>
</div>
  
  
  <h4 id="LodashExtra_castComputed_function_1_" data-uid="LodashExtra!castComputed:function(1)">castComputed(computedFunc, computedArgs)</h4>
  <div class="markdown level1 summary"><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">计算用函数</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function castComputed&lt;T, Args extends any[]&gt;(computedFunc: Type.Function&lt;Args, T&gt;, ...computedArgs: Args): T;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Type</span>.Function&lt;Args, T&gt;</td>
        <td><em>computedFunc</em></td>
        <td>
          <p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">计算用函数</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">Args</span></td>
        <td><em>computedArgs</em></td>
        <td>
          <p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">计算用参数</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">T</span></td>
        <td><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">computedFunc(...computedArgs) -<!-- -->&gt; 计算结果</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">&#31867;&#22411;&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><em>T</em></td>
        <td></td>
      </tr>
      <tr>
        <td><em>Args</em></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="LodashExtra_castComputed_function_2_" data-uid="LodashExtra!castComputed:function(2)">castComputed(nativeValue, args)</h4>
  <div class="markdown level1 summary"><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">计算用函数（同一性）</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function castComputed&lt;T extends NotFunction&gt;(nativeValue: T, ...args: any[]): T;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">T</span></td>
        <td><em>nativeValue</em></td>
        <td>
          <p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">非函数的值</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">any[]</span></td>
        <td><em>args</em></td>
        <td>
          <p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">可以传入参数不过没用</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">T</span></td>
        <td><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">原值返回</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">&#31867;&#22411;&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><em>T</em></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="LodashExtra_castComputedPipe_function_1_" data-uid="LodashExtra!castComputedPipe:function(1)">castComputedPipe(func, value)</h4>
  <div class="markdown level1 summary"><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">计算用管道函数，如果非函数则传递值自身</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function castComputedPipe&lt;V, T = V&gt;(func: Type.Function&lt;[V], T&gt; | T, value: V): T;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Type</span>.Function&lt;[V], T&gt; | T</td>
        <td><em>func</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">V</span></td>
        <td><em>value</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">T</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">&#31867;&#22411;&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><em>V</em></td>
        <td></td>
      </tr>
      <tr>
        <td><em>T</em></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="LodashExtra_castFunction_function_1_" data-uid="LodashExtra!castFunction:function(1)">castFunction(withFunction, raw)</h4>
  <div class="markdown level1 summary"><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">将参数转换为function</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function castFunction&lt;T = any&gt;(withFunction?: T, raw?: boolean): Type.Function&lt;any[], T&gt;;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">T</span></td>
        <td><em>withFunction</em></td>
        <td>
          <p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">参数</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">boolean</span></td>
        <td><em>raw</em></td>
        <td>
          <p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1"><code sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">default: false</code><!-- -->是否返回深拷贝的值而非引用值（通常为对象）</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Type</span>.Function&lt;any[], T&gt;</td>
        <td><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">参数类型为<code sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">function</code><!-- -->时直接返回参数<p> 其他情况返回一个<code sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">function</code><!-- -->，这个<code sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">function</code><!-- -->会返回你的参数</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">&#31867;&#22411;&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><em>T</em></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 id="LodashExtra_castFunction_function_1__remarks">&#22791;&#27880;</h5>
  <div class="markdown level1 remarks"><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1"><code sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">raw</code><!-- -->为<code sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">true</code><!-- -->时，返回的对象会进行深拷贝（完全解除和原对象的引用）</p>
</div>
  
  
  <h4 id="LodashExtra_castObject_function_1_" data-uid="LodashExtra!castObject:function(1)">castObject(target, keyInObject, checkRequired)</h4>
  <div class="markdown level1 summary"><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">转化一个对象为object 如果对象不是object，则返回一个嵌入指定key的新对象 可选第三个参数，判断条件变更为是否存在指定key的对象</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function castObject&lt;T, K extends KeyOf&lt;T&gt; | string&gt;(target: T | BaseType, keyInObject: K, checkRequired?: boolean): Exclude&lt;T, BaseType&gt; &amp; {
    [Key in K]: T extends object ? (K extends KeyOf&lt;T&gt; ? T[K] : unknown) : unknown;
};</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>T | <span class="xref">BaseType</span></td>
        <td><em>target</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">K</span></td>
        <td><em>keyInObject</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">boolean</span></td>
        <td><em>checkRequired</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Exclude</span>&lt;T, <span class="xref">BaseType</span>&gt; &amp; {
    [Key in K]: T extends object ? (K extends <span class="xref">KeyOf</span>&lt;T&gt; ? T[K] : unknown) : unknown;
}</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">&#31867;&#22411;&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><em>T</em></td>
        <td></td>
      </tr>
      <tr>
        <td><em>K</em></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="LodashExtra_castString_function_1_" data-uid="LodashExtra!castString:function(1)">castString(value)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function castString(value: any): any;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">any</span></td>
        <td><em>value</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">any</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="LodashExtra_createGroupWith_function_1_" data-uid="LodashExtra!createGroupWith:function(1)">createGroupWith(list, keyOrWith)</h4>
  <div class="markdown level1 summary"><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">根据条件将一个数组拆分为多个数组</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function createGroupWith&lt;T extends object = any&gt;(list: T[], keyOrWith: string | ((item: T) =&gt; string)): IKeyValueMap&lt;T[]&gt;;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">T[]</span></td>
        <td><em>list</em></td>
        <td>
          <p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">源数组</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string | ((item: T) =&gt; string)</span></td>
        <td><em>keyOrWith</em></td>
        <td>
          <p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">分组关键字或方法（返回一个关键字）</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">IKeyValueMap</span>&lt;T[]&gt;</td>
        <td><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">返回一个新对象</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">&#31867;&#22411;&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><em>T</em></td>
        <td><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">原数组的成员类型（必须为Object）</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 id="LodashExtra_createGroupWith_function_1__remarks">&#22791;&#27880;</h5>
  <div class="markdown level1 remarks"><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">更复杂的控制参照<a href="https://www.lodashjs.com/docs/latest#_groupbycollection-iteratee_identity" sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">Lodash.groupBy</a></p>
</div>
  
  
  <h4 id="LodashExtra_expectTo_function_1_" data-uid="LodashExtra!expectTo:function(1)">expectTo(value, configs, elseValue)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function expectTo(value: any, configs: [any, any, boolean?][], elseValue?: any): any;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">any</span></td>
        <td><em>value</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">[any, any, boolean?][]</span></td>
        <td><em>configs</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">any</span></td>
        <td><em>elseValue</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">any</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="LodashExtra_filterKeys_function_1_" data-uid="LodashExtra!filterKeys:function(1)">filterKeys(target, filter)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function filterKeys(target: Record&lt;string, any&gt;, filter: (code: string, value?: any) =&gt; boolean): string[];</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Record</span>&lt;string, any&gt;</td>
        <td><em>target</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">(code: string, value?: any) =&gt; boolean</span></td>
        <td><em>filter</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string[]</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="LodashExtra_filterMap_function_1_" data-uid="LodashExtra!filterMap:function(1)">filterMap(arr, igronFilter, formatter)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function filterMap&lt;S = string, T = string&gt;(arr: any[], igronFilter: (value: any) =&gt; boolean, formatter?: (k: S) =&gt; T): T[];</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">any[]</span></td>
        <td><em>arr</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">(value: any) =&gt; boolean</span></td>
        <td><em>igronFilter</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">(k: S) =&gt; T</span></td>
        <td><em>formatter</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">T[]</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">&#31867;&#22411;&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><em>S</em></td>
        <td></td>
      </tr>
      <tr>
        <td><em>T</em></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="LodashExtra_filterMapWith_function_1_" data-uid="LodashExtra!filterMapWith:function(1)">filterMapWith(arr, igronValue, formatter)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function filterMapWith&lt;S = string, T = string&gt;(arr: any[], igronValue: any, formatter?: (k: S) =&gt; T): T[];</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">any[]</span></td>
        <td><em>arr</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">any</span></td>
        <td><em>igronValue</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">(k: S) =&gt; T</span></td>
        <td><em>formatter</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">T[]</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">&#31867;&#22411;&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><em>S</em></td>
        <td></td>
      </tr>
      <tr>
        <td><em>T</em></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="LodashExtra_getType_function_1_" data-uid="LodashExtra!getType:function(1)">getType(v)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function getType(v: any): Type;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">any</span></td>
        <td><em>v</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Type</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="LodashExtra_isEmptyValue_function_1_" data-uid="LodashExtra!isEmptyValue:function(1)">isEmptyValue(value)</h4>
  <div class="markdown level1 summary"><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">是否为空或异常值，不包括0 空值: null/undefined/'' 异常值: NaN 不包括空对象/空数组</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function isEmptyValue(value: any): value is (null | undefined | '');</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">any</span></td>
        <td><em>value</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">value</span> is (null | undefined | &#39;&#39;)</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="LodashExtra_isEqual_function_1_" data-uid="LodashExtra!isEqual:function(1)">isEqual(value, other, noStrict)</h4>
  <div class="markdown level1 summary"><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">深比较两个值是否相等</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function isEqual(value: any, other: any, noStrict?: boolean): boolean;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">any</span></td>
        <td><em>value</em></td>
        <td>
          <p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">比较值</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">any</span></td>
        <td><em>other</em></td>
        <td>
          <p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">另一个值</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">boolean</span></td>
        <td><em>noStrict</em></td>
        <td>
          <p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">启用非严格模式(默认为false)，null和undefined视为相等</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">boolean</span></td>
        <td><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">如果两个值完全相同，那么返回true，否则返回false。</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 id="LodashExtra_isEqual_function_1__remarks">&#22791;&#27880;</h5>
  <div class="markdown level1 remarks"><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">\ NOTE: # **注意**. 这个方法支持比较 arrays, array buffers, booleans, date objects, error objects, maps, numbers, Object objects, regexes, sets, strings, symbols, 以及 typed arrays. Object 对象值比较自身的属性，不包括继承的和可枚举的属性。 不支持函数和DOM节点比较。</p>
</div>
  
  
  <h4 id="LodashExtra_isFunction_function_1_" data-uid="LodashExtra!isFunction:function(1)">isFunction(value)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function isFunction&lt;T extends ((...args: any[]) =&gt; any)&gt;(value: any): value is T;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">any</span></td>
        <td><em>value</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">value</span> is T</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">&#31867;&#22411;&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><em>T</em></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="LodashExtra_isNaN_function_1_" data-uid="LodashExtra!isNaN:function(1)">isNaN(value)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function isNaN(value: any): boolean;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">any</span></td>
        <td><em>value</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">boolean</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="LodashExtra_isNotEmptyValue_function_1_" data-uid="LodashExtra!isNotEmptyValue:function(1)">isNotEmptyValue(value)</h4>
  <div class="markdown level1 summary"><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">是否非空且非异常值，不包括0 空值: null/undefined/'' 不包括空对象/空数组</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function isNotEmptyValue(value: any): value is (string | number | boolean | object | Function);</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">any</span></td>
        <td><em>value</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">value</span> is (string | number | boolean | object | <span class="xref">Function</span>)</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="LodashExtra_isNotNil_function_1_" data-uid="LodashExtra!isNotNil:function(1)">isNotNil(value)</h4>
  <div class="markdown level1 summary"><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">检查<code sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">value</code><!-- -->是否为 <code sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">null</code> 或 <code sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">undefined</code></p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function isNotNil(value: any): boolean;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">any</span></td>
        <td><em>value</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">boolean</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="LodashExtra_isNum_function_1_" data-uid="LodashExtra!isNum:function(1)">isNum(value, allowNaN)</h4>
  <div class="markdown level1 summary"><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">判断一个值是否为数字</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function isNum(value: any, allowNaN?: true): value is number;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">any</span></td>
        <td><em>value</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">true</span></td>
        <td><em>allowNaN</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">value</span> is number</td>
        <td><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">— 返回true/false</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="LodashExtra_isNumber_function_1_" data-uid="LodashExtra!isNumber:function(1)">isNumber(value, allowNaN)</h4>
  <div class="markdown level1 summary"><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">判断一个值是否为数字</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function isNumber(value: any, allowNaN?: true): value is number;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">any</span></td>
        <td><em>value</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">true</span></td>
        <td><em>allowNaN</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">value</span> is number</td>
        <td><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">— 返回true/false</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="LodashExtra_isNumStrict_function_1_" data-uid="LodashExtra!isNumStrict:function(1)">isNumStrict(value)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function isNumStrict(value: any): value is number;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">any</span></td>
        <td><em>value</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">value</span> is number</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="LodashExtra_isPureObj_function_1_" data-uid="LodashExtra!isPureObj:function(1)">isPureObj(target)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function isPureObj&lt;T = object&gt;(target: any): target is T;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">any</span></td>
        <td><em>target</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">target</span> is T</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">&#31867;&#22411;&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><em>T</em></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="LodashExtra_mergeFuncPipe_function_1_" data-uid="LodashExtra!mergeFuncPipe:function(1)">mergeFuncPipe(funcA, funcB)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function mergeFuncPipe(funcA: any, funcB: any): any;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">any</span></td>
        <td><em>funcA</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">any</span></td>
        <td><em>funcB</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">any</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="LodashExtra_reduceMap_function_1_" data-uid="LodashExtra!reduceMap:function(1)">reduceMap(collection, callback, accumulator)</h4>
  <div class="markdown level1 summary"><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">近似_.map，callback需返回一个Object，最后将所有返回的Object组合为一个Object</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function reduceMap&lt;T, Result extends IKeyValueMap, TResult = {
    [K in keyof T]?: Result;
}&gt;(collection: List&lt;T&gt; | T[] | null | undefined, callback: ReduceMapObjectIterator&lt;List&lt;T&gt; | T[] | null | undefined, Result, TResult&gt;, accumulator?: TResult): TResult;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">&quot;\&quot;../index\&quot;&quot;.List</span>&lt;T&gt; | T[] | null | undefined</td>
        <td><em>collection</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">ReduceMapObjectIterator</span>&lt;<span class="xref">&quot;\&quot;../index\&quot;&quot;.List</span>&lt;T&gt; | T[] | null | undefined, Result, TResult&gt;</td>
        <td><em>callback</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">TResult</span></td>
        <td><em>accumulator</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">TResult</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">&#31867;&#22411;&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><em>T</em></td>
        <td></td>
      </tr>
      <tr>
        <td><em>Result</em></td>
        <td></td>
      </tr>
      <tr>
        <td><em>TResult</em></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 id="LodashExtra_reduceMap_function_1__remarks">&#22791;&#27880;</h5>
  <div class="markdown level1 remarks"><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">see: _.map</p>
</div>
  
  
  <h4 id="LodashExtra_reduceMap_function_2_" data-uid="LodashExtra!reduceMap:function(2)">reduceMap(collection, callback, accumulator)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function reduceMap&lt;T extends IKeyValueMap, Result = any, TResult = {
    [K in keyof T]?: Result;
}&gt;(collection: T | null | undefined, callback: ReduceMapObjectIterator&lt;T, Result, TResult&gt;, accumulator?: TResult): TResult;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">T | null | undefined</span></td>
        <td><em>collection</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">ReduceMapObjectIterator</span>&lt;T, Result, TResult&gt;</td>
        <td><em>callback</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">TResult</span></td>
        <td><em>accumulator</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">TResult</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">&#31867;&#22411;&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><em>T</em></td>
        <td></td>
      </tr>
      <tr>
        <td><em>Result</em></td>
        <td></td>
      </tr>
      <tr>
        <td><em>TResult</em></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 id="LodashExtra_reduceMap_function_2__remarks">&#22791;&#27880;</h5>
  <div class="markdown level1 remarks"><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">see: _.reduce</p>
</div>
  
  
  <h4 id="LodashExtra_stubFunction_function_1_" data-uid="LodashExtra!stubFunction:function(1)">stubFunction(args)</h4>
  <div class="markdown level1 summary"><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">一个静态函数</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function stubFunction(...args: any[]): undefined;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">any[]</span></td>
        <td><em>args</em></td>
        <td>
          <p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">任意参数</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">undefined</span></td>
        <td><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">什么都不会返回</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="LodashExtra_stubObjectReturn_function_1_" data-uid="LodashExtra!stubObjectReturn:function(1)">stubObjectReturn(arg, args)</h4>
  <div class="markdown level1 summary"><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">一个只有返回功能的静态函数</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function stubObjectReturn&lt;T&gt;(arg?: T, ...args: any[]): T extends object ? T : {};</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">T</span></td>
        <td><em>arg</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">any[]</span></td>
        <td><em>args</em></td>
        <td>
          <p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">任意参数</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">T extends object ? T : {}</span></td>
        <td><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">传入对象返回直接，如果不是对象或者什么都没传则返回空对象</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">&#31867;&#22411;&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><em>T</em></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="LodashExtra_stubObjectStatic_function_1_" data-uid="LodashExtra!stubObjectStatic:function(1)">stubObjectStatic(args)</h4>
  <div class="markdown level1 summary"><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">一个静态函数，返回一个对象</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function stubObjectStatic(...args: any[]): typeof Constant$.EMPTY_OBJECT;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">any[]</span></td>
        <td><em>args</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>typeof <span class="xref">Constant$.EMPTY_OBJECT</span></td>
        <td><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">一个静态的空对象，多次调用也永远指向同一个内存地址</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="LodashExtra_stubReturn_function_1_" data-uid="LodashExtra!stubReturn:function(1)">stubReturn(arg, args)</h4>
  <div class="markdown level1 summary"><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">一个只有返回功能的静态函数</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function stubReturn&lt;T&gt;(arg?: T, ...args: any[]): T;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">T</span></td>
        <td><em>arg</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">any[]</span></td>
        <td><em>args</em></td>
        <td>
          <p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">任意参数</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">T</span></td>
        <td><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">传入什么返回什么，如果什么都没传则返回自身</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">&#31867;&#22411;&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><em>T</em></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="LodashExtra_stubReturn_function_2_" data-uid="LodashExtra!stubReturn:function(2)">stubReturn()</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function stubReturn(): typeof stubReturn;</code></pre>
  </div>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>typeof <span class="xref">stubReturn</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="LodashExtra_stubReturn2nd_function_1_" data-uid="LodashExtra!stubReturn2nd:function(1)">stubReturn2nd(arg1, arg2, args)</h4>
  <div class="markdown level1 summary"><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">一个只有返回功能的静态函数</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function stubReturn2nd&lt;T&gt;(arg1?: any, arg2?: T, ...args: any[]): T;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">any</span></td>
        <td><em>arg1</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">T</span></td>
        <td><em>arg2</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">any[]</span></td>
        <td><em>args</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">T</span></td>
        <td><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">第二个传入什么返回什么</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">&#31867;&#22411;&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><em>T</em></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="LodashExtra_stubReturnArgs_function_1_" data-uid="LodashExtra!stubReturnArgs:function(1)">stubReturnArgs(args)</h4>
  <div class="markdown level1 summary"><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">一个只有返回功能的静态函数</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function stubReturnArgs&lt;T extends any[]&gt;(...args: T): T;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">T</span></td>
        <td><em>args</em></td>
        <td>
          <p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">任意参数</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">T</span></td>
        <td><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">传入收集起来的参数</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">&#31867;&#22411;&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><em>T</em></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="LodashExtra_trackMerge_function_1_" data-uid="LodashExtra!trackMerge:function(1)">trackMerge(object, source, options)</h4>
  <div class="markdown level1 summary"><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">栈合并</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function trackMerge&lt;Target, Source&gt;(object: Target, source: Source, options?: TrackMergeOptions): Partial&lt;Target &amp; Source&gt;;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Target</span></td>
        <td><em>object</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">Source</span></td>
        <td><em>source</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><a class="xref" href="lodashextra/trackmergeoptions.html#LodashExtra_TrackMergeOptions_interface">TrackMergeOptions</a></td>
        <td><em>options</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Partial</span>&lt;Target &amp; Source&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">&#31867;&#22411;&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><em>Target</em></td>
        <td></td>
      </tr>
      <tr>
        <td><em>Source</em></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 id="LodashExtra_trackMerge_function_1__remarks">&#22791;&#27880;</h5>
  <div class="markdown level1 remarks"><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">实现细节见: <a href="https://www.lodashjs.com/docs/latest#_mergewithobject-sources-customizer" sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">https://www.lodashjs.com/docs/latest#_mergewithobject-sources-customizer</a></p>
</div>
  
  
  <h4 id="LodashExtra_trackMergePipe_function_1_" data-uid="LodashExtra!trackMergePipe:function(1)">trackMergePipe(target, source)</h4>
  <div class="markdown level1 summary"><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">栈合并</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function trackMergePipe&lt;Object, Source&gt;(target: Object, ...source: Source[]): any;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Object</span></td>
        <td><em>target</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">Source[]</span></td>
        <td><em>source</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">any</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">&#31867;&#22411;&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><em>Object</em></td>
        <td></td>
      </tr>
      <tr>
        <td><em>Source</em></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 id="LodashExtra_trackMergePipe_function_1__remarks">&#22791;&#27880;</h5>
  <div class="markdown level1 remarks"><p sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">实现细节见: <a href="https://www.lodashjs.com/docs/latest#_mergewithobject-sources-customizer" sourcefile="src/lodashextra.yml" sourcestartlinenumber="1">https://www.lodashjs.com/docs/latest#_mergewithobject-sources-customizer</a></p>
</div>
  
  
  <h4 id="LodashExtra_trackMergePipe_function_2_" data-uid="LodashExtra!trackMergePipe:function(2)">trackMergePipe(target, source)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function trackMergePipe&lt;Object, Source&gt;(target: Object, ...source: any[]): any;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Object</span></td>
        <td><em>target</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">any[]</span></td>
        <td><em>source</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">any</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">&#31867;&#22411;&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><em>Object</em></td>
        <td></td>
      </tr>
      <tr>
        <td><em>Source</em></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="LodashExtra_useAdapter_function_1_" data-uid="LodashExtra!useAdapter:function(1)">useAdapter(adapter, adapterKey)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function useAdapter&lt;T = FunctionFactory.Base&gt;(adapter: IKeyValueMap&lt;T&gt;, adapterKey: Exclude&lt;TKey, symbol&gt;): typeof stubObjectStatic | T;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">IKeyValueMap</span>&lt;T&gt;</td>
        <td><em>adapter</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">Exclude</span>&lt;<span class="xref">TKey</span>, symbol&gt;</td>
        <td><em>adapterKey</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>typeof <span class="xref">stubObjectStatic</span> | T</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">&#31867;&#22411;&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><em>T</em></td>
        <td></td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>

<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title> </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content=" ">
    <meta name="generator" content="docfx 2.43.3.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="DecoratorUtils!">
  
  
  <h1 id="DecoratorUtils_" data-uid="DecoratorUtils!"></h1>
  <div class="markdown level0 summary"></div>
  <div class="markdown level0 conceptual"></div>
  <h3 id="functions">
  </h3>
  
  
  <h4 id="DecoratorUtils_createDecoratorBase_function_1_" data-uid="DecoratorUtils!createDecoratorBase:function(1)">createDecoratorBase(key, value)</h4>
  <div class="markdown level1 summary"><p>创建装饰器</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function createDecoratorBase&lt;BaseTarget extends Record&lt;string, any&gt;, Init extends Record&lt;string, any&gt; | Function&gt;(key: string, value: Init): (&lt;T extends BaseTarget&gt;(validConstractor?: ConstructorType&lt;T, [any?, any?, ...any[]]&gt;) =&gt; InjectContainer&lt;T&gt;) &amp; DecoratorContextBase&lt;BaseTarget, Init, Init extends Function ? true : false, Init extends (...args: any[]) =&gt; infer T_1 ? T_1 : Init, keyof BaseTarget, Record&lt;keyof BaseTarget, PropertyDescriptor&gt;&gt;;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>key</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">Init</span></td>
        <td><em>value</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>(&lt;T extends BaseTarget&gt;(validConstractor?: <span class="xref">ConstructorType</span>&lt;T, [any?, any?, ...any[]]&gt;) =&gt; <span class="xref">InjectContainer</span>&lt;T&gt;) &amp; <a class="xref" href="decoratorutils/decoratorcontextbase.html#DecoratorUtils_DecoratorContextBase_interface">DecoratorContextBase</a>&lt;BaseTarget, Init, Init extends <span class="xref">Function</span> ? true : false, Init extends (...args: any[]) =&gt; infer T_1 ? T_1 : Init, keyof BaseTarget, <span class="xref">Record</span>&lt;keyof BaseTarget, <span class="xref">PropertyDescriptor</span>&gt;&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">&#31867;&#22411;&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><em>BaseTarget</em></td>
        <td></td>
      </tr>
      <tr>
        <td><em>Init</em></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="DecoratorUtils_createTrasaction_function_1_" data-uid="DecoratorUtils!createTrasaction:function(1)">createTrasaction(runner)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function createTrasaction(runner?: (foreExit: () =&gt; void) =&gt; any): {
    runner: (foreExit: () =&gt; void) =&gt; any;
    lockSet: Set&lt;Promise&lt;unknown&gt;&gt;;
    generateLock(taskId?: string | number): () =&gt; void;
    waitLock(): boolean | Promise&lt;unknown&gt;;
    run&lt;T&gt;(runner: (foreExit: () =&gt; void) =&gt; T): Promise&lt;T&gt;;
    runInAsync&lt;T_1, Args extends any[]&gt;(runner: (...args: Args, foreExit: () =&gt; void) =&gt; Promise&lt;T_1&gt;, args: Args): Promise&lt;T_1&gt;;
};</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">(foreExit: () =&gt; void) =&gt; any</span></td>
        <td><em>runner</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>{
    runner: (foreExit: () =&gt; void) =&gt; any;
    lockSet: <span class="xref">Set</span>&lt;<span class="xref">Promise</span>&lt;unknown&gt;&gt;;
    generateLock(taskId?: string | number): () =&gt; void;
    waitLock(): boolean | <span class="xref">Promise</span>&lt;unknown&gt;;
    run&lt;T&gt;(runner: (foreExit: () =&gt; void) =&gt; T): <span class="xref">Promise</span>&lt;T&gt;;
    runInAsync&lt;T_1, Args extends any[]&gt;(runner: (...args: Args, foreExit: () =&gt; void) =&gt; <span class="xref">Promise</span>&lt;T_1&gt;, args: Args): <span class="xref">Promise</span>&lt;T_1&gt;;
}</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="DecoratorUtils_generateLock_function_1_" data-uid="DecoratorUtils!generateLock:function(1)">generateLock(lockSet, taskId)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function generateLock(lockSet?: Set&lt;Promise&lt;unknown&gt;&gt;, taskId?: string | number): () =&gt; void;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Set</span>&lt;<span class="xref">Promise</span>&lt;unknown&gt;&gt;</td>
        <td><em>lockSet</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string | number</span></td>
        <td><em>taskId</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">() =&gt; void</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="DecoratorUtils_generateNamespace_function_1_" data-uid="DecoratorUtils!generateNamespace:function(1)">generateNamespace(target, keyName, prevIndex)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function generateNamespace&lt;T&gt;(target: T, keyName?: string, prevIndex?: number): any;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">T</span></td>
        <td><em>target</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>keyName</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">number</span></td>
        <td><em>prevIndex</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">any</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">&#31867;&#22411;&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><em>T</em></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="DecoratorUtils_generateNamespace2_function_1_" data-uid="DecoratorUtils!generateNamespace2:function(1)">generateNamespace2(target, keyName, extendsIndex)</h4>
  <div class="markdown level1 summary"><p>生成实例的内部实现细节存储空间(namespace)</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function generateNamespace2&lt;T&gt;(target: T, keyName?: string, extendsIndex?: number): string;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">T</span></td>
        <td><em>target</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>keyName</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">number</span></td>
        <td><em>extendsIndex</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">&#31867;&#22411;&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><em>T</em></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="DecoratorUtils_getConstructor_function_1_" data-uid="DecoratorUtils!getConstructor:function(1)">getConstructor(Target)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function getConstructor&lt;T extends Function = any&gt;(Target: T): PropertyDescriptor;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">T</span></td>
        <td><em>Target</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">PropertyDescriptor</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">&#31867;&#22411;&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><em>T</em></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="DecoratorUtils_hackConstructor_function_1_" data-uid="DecoratorUtils!hackConstructor:function(1)">hackConstructor(Target, hack, prefix)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function hackConstructor&lt;T extends Function, Args extends any[]&gt;(Target: T, hack: (args: Args, HackedTarget: T, instance: any) =&gt; Args, prefix?: string): T;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">T</span></td>
        <td><em>Target</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">(args: Args, HackedTarget: T, instance: any) =&gt; Args</span></td>
        <td><em>hack</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>prefix</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">T</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">&#31867;&#22411;&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><em>T</em></td>
        <td></td>
      </tr>
      <tr>
        <td><em>Args</em></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="DecoratorUtils_injectNamespace_function_1_" data-uid="DecoratorUtils!injectNamespace:function(1)">injectNamespace(target, keyName, initialValue, options)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function injectNamespace&lt;T, VT = any&gt;(target: T, keyName: string, initialValue?: VT | ((...args: any[]) =&gt; VT), options?: InjectNamespaceOptions): TypedPropertyDescriptor&lt;VT&gt; &amp; {
    generedKey: string;
};</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">T</span></td>
        <td><em>target</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>keyName</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">VT | ((...args: any[]) =&gt; VT)</span></td>
        <td><em>initialValue</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">InjectNamespaceOptions</span></td>
        <td><em>options</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">TypedPropertyDescriptor</span>&lt;VT&gt; &amp; {
    generedKey: string;
}</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">&#31867;&#22411;&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><em>T</em></td>
        <td></td>
      </tr>
      <tr>
        <td><em>VT</em></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="DecoratorUtils_logger_function_1_" data-uid="DecoratorUtils!logger:function(1)">logger(name, time)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function logger&lt;P extends any = any&gt;(name?: string, time?: boolean): (target: any, methodName: string, descriptor: PropertyDescriptor) =&gt; void;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>name</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">boolean</span></td>
        <td><em>time</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>(target: any, methodName: string, descriptor: <span class="xref">PropertyDescriptor</span>) =&gt; void</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">&#31867;&#22411;&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><em>P</em></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="DecoratorUtils_Trasaction_function_1_" data-uid="DecoratorUtils!Trasaction:function(1)">Trasaction(trasactionKey)</h4>
  <div class="markdown level1 summary"><p>事务锁定修饰符，保证一个async/返回一个Promise的函数的时序性</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function Trasaction(trasactionKey?: string): MethodDecorator;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>trasactionKey</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">MethodDecorator</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="DecoratorUtils_waitingLock_function_1_" data-uid="DecoratorUtils!waitingLock:function(1)">waitingLock(lockSet)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function waitingLock(lockSet: Set&lt;Promise&lt;unknown&gt;&gt;): boolean | Promise&lt;unknown&gt;;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Set</span>&lt;<span class="xref">Promise</span>&lt;unknown&gt;&gt;</td>
        <td><em>lockSet</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>boolean | <span class="xref">Promise</span>&lt;unknown&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="DecoratorUtils_withAsyncOr_function_1_" data-uid="DecoratorUtils!withAsyncOr:function(1)">withAsyncOr(target, when, or)</h4>
  <div class="markdown level1 summary"><p>逻辑工具函数 接收一个值，如果是非Promise则自动包装为Promise 如果传入值为Promise，可传入回调函数 如果传入值为非Promise，可传入回调函数</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">&#22768;&#26126;</h5>
  <div class="codewrapper">
    <pre><code class="lang-typeScript hljs">export declare function withAsyncOr&lt;T&gt;(target: T | Promise&lt;T&gt;, when?: (resolving: boolean) =&gt; void, or?: () =&gt; void): Promise&lt;T&gt;;</code></pre>
  </div>
  <h5 class="parameters">&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>T | <span class="xref">Promise</span>&lt;T&gt;</td>
        <td><em>target</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">(resolving: boolean) =&gt; void</span></td>
        <td><em>when</em></td>
        <td>
          
          
        </td>
      </tr>
      <tr>
        <td><span class="xref">() =&gt; void</span></td>
        <td><em>or</em></td>
        <td>
          
          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">&#36820;&#22238;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#31867;&#22411;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span>&lt;T&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">&#31867;&#22411;&#21442;&#25968;</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>&#21517;&#31216;</th>
        <th>&#25551;&#36848;</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><em>T</em></td>
        <td></td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>
